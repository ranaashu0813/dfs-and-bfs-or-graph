// code of bfs traversal 
#include<queue>
#include<vector>
class Solution {
    public:
    void bfs_cycle(vector<int>adj[],int i,vector<bool>&visited,vector<int>&ans){
        visited[i] = true; 
        queue<int>q; 
        q.push(i);
        while(!q.empty()){
            int elem = q.front();
            q.pop();
            ans.push_back(elem);
            for(auto x:adj[elem]){
                
                if (x==false){
                    q.push(x);
                    visited[x]==true; 
                }
            }
        }
      
    }
  public:
  
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
       vector<bool>visited(V+1,false);
       vector<int>ans;
       //this for loop is added because of traversing all the graph means detached as well

           
       
            
               bfs_cycle(adj,0,visited,ans);
           
       
       return ans; 
    }
};


//code of dfs traversal 


  public:
  
  void dfs(vector<int> &res, vector<bool> &vis,int src,vector<int> adj[]){
        vis[src]=true;
        res.push_back(src);
        
        for(auto &x:adj[src]){
            if(!vis[x])
            dfs(res,vis,x,adj);
        }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        vector<bool> vis(V,false);
        vector<int> res;
        dfs(res,vis,0,adj);
        
       return res;
        
    }
};
